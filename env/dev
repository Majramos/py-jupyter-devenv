#!/usr/bin/env bash
#
# Setup a python+jupyter development environment

# fail-fast
set -o errexit
set -o nounset
set -o pipefail

# variables needed
readonly SCRIPT_PATH="$(dirname "${BASH_SOURCE[0]}")"
readonly SCRIPT_NAME="${PWD##*/}"
readonly ERROR_PARSING_OPTIONS=80
readonly ERROR_CODE=81
verbose='false'
skip_docker_check_flag='false'
build_flag='false'
default_flag='false'
create_flag='false'
run_flag='false'

source "${SCRIPT_PATH}/image.sh"
source "${SCRIPT_PATH}/container.sh"

usage () {
    cat <<USAGE_TEXT
Usage: ./env/dev [-h | --help] [-v | --verbose] [-s | --skip] [-b | --build]
                 [-d | --default] [-c | --create] [-r | --run] [--lc] [--li]
                 [--show-defaults]
DESCRIPTION
    Setup a python+jupyter development environment using containers trough Docker
OPTIONS:
    -h, --help
        Print this help and exit.
    -v, --verbose
        Verbose output
    -s, --skip
        Skip checking if docker is installed and initialized
    -b, --build
        Build a new image skipping the lookup for new images
    -d, --default
        Build a new image using default versions
        Use --show-defaults to list the defaults values
    -c, --create
        Create a container from a existing image
    -r, --run
        Run a existing container
    --li
        List available images with python and jupyterlab
    --lc
        List available containers with python and jupyterlab
    --show-defaults
        List stack version used (python and jupyter lab)
AUTHOR
    Marco Ramos
USAGE_TEXT
}

die() {
    local -r msg="${1}"
    local -r code="${2:-90}"
    echo "${msg}" >&2
    exit "${code}"
}

# to send message in case of verbose output
msg() {
    local -r msg="${1}"
    if [[ $verbose == 'true' ]]; then
        echo "${msg}"
    fi
}

parse_user_options() {
    local -r args=("${@}")
    local opts
    # The following code works perfectly for 
    opts=$(getopt --options h,v,b,r --long help,verbose,build,run,lc,li,default,show-defaults -- "${args[@]}" 2> /dev/null) || {
        usage
        die "error: parsing options" "${ERROR_PARSING_OPTIONS}"
    }
    eval set -- "${opts}"
    while true; do
        case "${1}" in
            -h|--help)
                usage
                exit 0
                shift
                ;;
            -v|--verbose)
                verbose="true"
                shift
                ;;
            -s|--skip)
                skip_docker_check_flag="true"
                shift
                ;;
            -b|--build)
                build_flag="true"
                shift
                ;;
            -d|--default)
                default_flag="true"
                shift
                ;;
            -c|--create)
                create_flag="true"
                shift
                ;;
            -r|--run)
                run_flag="true"
                shift
                ;;
            --lc)
                msg "Looking for python+jupyter environments in containers"
                get_containers
                exit 0
                ;;
            --li)
                msg "Looking for python+jupyter images"
                get_images
                exit 0
                ;;
            --show-defaults)
                list_stack_version
                exit 0
                ;;
            --)
                build_flag="true"
                create_flag="true"
                run_flag="true"
                shift
                break
                ;;
            *)
                usage
                exit 0
                ;;
        esac
    done
}
parse_user_options "${@}"

if [[ $skip_docker_check_flag == "false" ]]; then
    # Check if docker is installed
    __temp=$(which docker)  
    if [[ $? -eq 1 ]]; then
        die "Docker instalation not found, please install docker first!"
    fi

    # Check if docker is initilized
    docker_version=$(docker --version)
    if [[ $? -eq 1 ]];
    then
        die "Docker is installed but not started, please start docker daemon!"
    else
        msg "Found Docker: ${docker_version}"
    fi
fi

if [[ $build_flag == "true" ]]; then
    if [[ $default_flag == "true" ]]; then
        set_defaults
    else
        prompt_versions
    fi
    build_image
fi

if [[ $create_flag == "true" ]]; then
    if [[ $build_flag == "false" ]]; then prompt_images; fi
    prompt_container
    create_container
fi

if [[ $run_flag == "true" ]]; then
    source "${SCRIPT_PATH}/run.sh"
fi

msg "Exiting Script..."
exit 0
